include c.snip

# #include <...>
snippet inc
alias   #inc, #include
    #include <${1:iostream}>${0}
# #include "..."
snippet inc2
alias   #inc2, #include2, Inc
    #include "${1:`substitute(expand('%:t'), 'cpp$', 'hpp', '')`}"${2}

snippet     template
abbr        template <T>
    template<typename ${1:T}> 

snippet     cl
alias       class
abbr        class {}
    class ${1:`expand('%:t:r')`}
    {
        public:
            $1(${2:void});
            $1($1 const & src);
            virtual ~$1(void);
            $1 &    operator=($1 const & rhs)

        private:
            ${3:/* data */}

    };

snippet     class-without-constructor
alias       clw
abbr        class {}
    class ${1:`expand('%:t:r')`}
    {
        ${2}
    };

snippet     try
abbr        try catch
    try {
        ${1:#:TARGET}
    } catch (${2:...}) {
        ${3}
    }

# range based for ( C++11 feature )
snippet     for_CPP11
abbr        for (:) {}
    for (${1:auto&& }${2:var} : ${3:container}) {
        ${0:TARGET}
    }

# lambda expression ( C++11 feature )
snippet     lambda
abbr        [](){}
    [${1}](${2})${3}{ ${4:TARGET} }${0:;}

# scoped enumeration ( C++11 feature )
snippet     enum_scoped
abbr        enum struct {};
    enum struct ${1:#:name} { ${2:#:TARGET} };

# static assert ( C++11 feature )
snippet     static_assert
abbr        static_assert(,"")
    static_assert( ${1}, "${2}" );${0}

delete      namespace
snippet     namespace
alias       ns
abbr        namespace {}
options     head
    namespace ${1:`Filename('', 'my')`}
    {
        ${2}
    } /* $1 */

snippet     static_cast
abbr        static_cast<>()
    static_cast<${1}>(${2})${0}

snippet     reinterpret_cast
abbr        reinterpret_cast<>()
    reinterpret_cast<${1}>(${2})${0}

snippet     const_cast
abbr        const_cast<>()
    const_cast<${1}>(${2})${0}

snippet     dynamic_cast
abbr        dynamic_cast<>()
    dynamic_cast<${1}>(${2})${0}

snippet     helloworld
abbr        #include<iostream> int main...
    #include <iostream>

    int main(int argc, char const* argv[])
    {
        std::cout << "hello, world!" << std::endl;
        return 0;
    }

snippet     p
options     head
  std::cout << ${0:TARGET} << std::endl;

snippet     map
abbr        std::map<>
    std::map<${1:key}, ${2:value}> map${3};

snippet     vector
abbr        std::vector<>
	std::vector<${1:char}> v${2};

snippet readfile
abbr    if (FILE...)
	std::vector<char> v;

	if (FILE *${2:fp} = fopen(${1:"filename"}, "r"))
	{
		char buf[1024];
		while (size_t len = fread(buf, 1, sizeof(buf), $2))
			v.insert(v.end(), buf, buf + len);
		fclose($2);
	}${3}

