snippet     if
abbr        if () {}
    if (${1:/* condition */})
    {
        ${2:/* code */}
    }

snippet else
alias   el
abbr    else {}
    else
    {
        ${1:TARGET}
    }

snippet elseif
alias   elif
abbr    else if () {}
    else if (${1:/* condition */})
    {
        ${2:/* code */}
    }

snippet     ifelse
alias       ifel
abbr        if () {} else {}
    if (${1:/* condition */})
    {
        ${2:/* code */}
    }
    else
    {
        ${3: /* code */}
    }

snippet     for
abbr        for () {}
    for (${2:i} = 0; $2 < ${1:count}; $2${4:++})
    {
        ${4:/* code */}
    }

snippet     forr
abbr        for () {}
    for (${1:i} = ${2:0}; ${3:$1 < 10}; $1${4:++})
    {
        ${5:/* code */}
    }

snippet     while
abbr        while () {}
    while (${1:#:condition})
    {
        ${0:TARGET}
    }

snippet     do_while
alias       do
    do {
        ${0:TARGET:code}
    } while (${1:#:condition});

snippet     switch
abbr        switch () {}
    switch (${1:#:var}) {
        case ${2:#:val}:
            ${0:TARGET}
            break;
    }

snippet     function
alias       fun, func
abbr        func() {}
    ${1:void} ${2:function_name}(${3})
    {
        ${4:/* code */}
    }

snippet     function_declaration
alias       fund
abbr        func();
    ${1:void} ${2:function_name}(${3});${4}


snippet     struct
alias       st
abbr        struct {}
	struct s_${1:`expand('%:t:r')`}
    {
		${2:/* data */}
	}${3: /* optional variable list */};${4}

# Typedef struct
snippet     struct_typedef
alias       tds
abbr        typedef struct{};
	typedef struct s_$1
    {
		${2:/* data */}
	} t_${1:`expand('%:t:r')`};

snippet     enum
abbr        enum {}
    enum ${1:#:name}
    {
        ${0:TARGET}
    };

snippet     enum_typedef
alias       tde
	typedef enum
    {
		${1:/* data */}
	} ${2:foo};


# hard-tab is necessary; C indent doesn't support this.
snippet main
	int main(int ac, const char **av)
	{
		${1:/* code */}
		return (0);
	}

# #include <...>
snippet inc
alias   #inc, #include
    #include <${1:stdio}.h>${0}
# #include "..."
snippet inc2
alias   Inc, #inc2, #include2
    #include "${1:`expand('%:t:r')`}.h"${0}

snippet ifndef
alias   #ifndef
abbr #ifndef ... #define ... #endif
    #ifndef $1
    #define ${1:#:SYMBOL}
    #endif${0}

snippet Def
	#ifndef $1
	#define ${1:SYMBOL} ${2:value}
	#endif${3}


snippet def
alias   #def, #define
    #define 

snippet #if
    #if ${1:FOO}
        ${2}
    #endif

snippet ifdef
abbr    #ifdef ... #endif
    #ifdef ${1:FOO}
        ${2:#define}
    #endif

# Include-Guard
snippet once
abbr include-guard
    #ifndef ${1:`toupper(substitute(expand('%:t'), '\.', '_', ''))`}
    #define $1

        ${2}

    #endif

# Ternary conditional operator
snippet conditional
    (${1:#:condition}) ? ${2:#:a} : ${3:#:b}

snippet typedef
alias   td
    typedef ${1:#:base_type} ${2:#:custom_type};

snippet printf
alias   pr
abbr    printf("...\n", ...);
    printf("${1}\n", ${2});

snippet fprintf
alias   fpr
abbr    fprintf(..., "...\n", ...);
    fprintf(${1:stderr}, "${2}\n"${3});

snippet comment
alias /*
    /* ${1:#:comment} */
    ${0}

snippet sizeof
alias size
    sizeof(${0:TARGET})

snippet helloworld
    #include <stdio.h>
    int main(int argc, char const* argv[])
    {
        puts("hello, world!");
        return 0;
    }

snippet fopen
abbr    fopen("...", "...");
    fopen("${1:PATH}", "${2:MODE}");
    ${0:TARGET}
    fclose(${3:FD});

snippet fgets
abbr    fgets(row, length, file);
    fgets(${0:ROW}, ${1:LENGTH}, ${2:FILE});

snippet un
abbr    unsigned
    unsigned
